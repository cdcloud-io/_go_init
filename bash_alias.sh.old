#!/usr/bin/env bash

# ==============================================================================
# Title          : Go Init Script
# Description    : This script sets up a Go project environment and should be sourced.
# Company        : cdcloud-io
# Author         : cd-stephen
# References     : [URLs or other references]
# Last Modified  : 7/2/2024
# Version        : 1.0
# Usage          : source go_init.sh
# Notes          : Ensure this script is sourced to run the function in the current shell.
# ==============================================================================

clear
echo 'sourcing go_init.sh ðŸŸ¨'
sleep 1

# Function to set up a Go project
function go_init() {
    # Check if Makefile and .gitignore already exist
    if [ -f Makefile ] || [ -f .gitignore ]; then
        echo "Error: Not an empty project. exceptions: .git folder. Exiting..."
        return 1
    fi

    # Download the Makefile and .gitignore
    wget -q https://raw.githubusercontent.com/cdcloud-io/go_init/main/Makefile -O Makefile
    wget -q https://raw.githubusercontent.com/cdcloud-io/go_init/main/.gitignore -O .gitignore
    
    # Extract the MODULE_NAME from the current directory name
    MODULE_NAME=$(basename "$(pwd)")
    
    # Extract the URL_PATH from the Git configuration if a .git directory exists
    if [ -d ".git" ]; then
        GIT_URL=$(git config --get remote.origin.url)
        echo "GIT_URL: $GIT_URL"
        URL_PATH=$(echo "$GIT_URL" | sed -E "s|git@([^:]+):([^/]+/[^/]+)\.git$|\\1/\\2|")
        echo "GO MOD: $URL_PATH"
    else
        URL_PATH=""
    fi
    
    # Use sed to replace the placeholders in the Makefile
    sed -i "s|^MODULE_NAME :=.*|MODULE_NAME := $MODULE_NAME|" Makefile
    sed -i "s|^URL_PATH :=.*|URL_PATH := $URL_PATH|" Makefile

    echo "Makefile has been set up with MODULE_NAME: $MODULE_NAME and URL_PATH: $URL_PATH"

    if [ ! -f go.mod ]; then
        if [ -d "cmd" ]; then
            echo "Directory ./cmd already exists. Initialization aborted to prevent overwriting existing code."
        else
            if [ -z "${URL_PATH}" ]; then
                echo "Initializing Go module..."
                go mod init "${MODULE_NAME}"
            else
                echo "Initializing Go module with URL path..."
                go mod init "${URL_PATH}"
            fi

            # Create necessary directories
            mkdir -p api                            ## openapi spec
            mkdir -p bin                            ## compilation bin destination
            mkdir -p build/{docker,k8s/kustomize}   ## scripts for build, run, deploy
            mkdir -p cmd/${MODULE_NAME}             ## application entry point. main.go
            mkdir -p config                         ## config.yaml used by internal/config/config.go
            mkdir -p docs/img                       ## module/app documentation and imgages
            mkdir -p example                        ## optional use for app/code usage examples
            mkdir -p internal/{config,endpoint/user,middleware/auth,middleware/logging,middleware/trace,server}  ## module/app internal packages
            mkdir -p test                           ## unit/integration tests

            printf "# %s" "${MODULE_NAME}" > README.md
        fi
    else
        echo 'Error: Go module already initialized.'
    fi
}
clear
echo 'sourcing go_init.sh ðŸŸ©'

# Make sure to source this file in .bashrc
# source /path/to/this/file/go_init.sh or source $HOME/go_init.sh
