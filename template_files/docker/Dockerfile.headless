## 1st stage: build the app
FROM golang:1.22-bookworm AS build-stage

### Set the CGO_ENABLED environment variable to 0 to disable c lib dependancies
ARG CGO_ENABLED=0

### Set the compilation to linux
ARG GOOS=linux

WORKDIR /build
RUN mkdir -p bin/output

COPY go.mod go.sum ./
RUN go mod download

COPY . .

RUN go build -ldflags="-s -w" -o bin/__MODULE_NAME__ ./cmd/__MODULE_NAME__

## 2nd stage: run tests
# FROM build-stage AS run-test-stage
# RUN go test -v ./...

## 3rd stage: create the production runtime image
### Note: Go is single binary executables.  we can use scratch, headless or slim images based on OS lib dependancies.
FROM gcr.io/distroless/base-debian12 AS build-release-stage

LABEL maintainedBy="cdcloud.dev"

ARG _APP_NAME=""
ARG _APP_VERSION=""
ARG _APP_COMMIT_SHA=""
ARG _APP_BUILD_ID=""
ARG _APP_BUILD_DATE=""

### Set by pipeline for docker build
### _APP_<VARIABLE> are immutable environment variables that are "burned" into the docker image at build time.
### These values need to be present for /info and /healthz endpoints for dynamic loadbalancing.
ENV _APP_NAME=${_APP_NAME}
ENV _APP_VERSION=${_APP_VERSION}
ENV _APP_COMMIT_SHA=${_APP_COMMIT_SHA}
ENV _APP_BUILD_ID=${_APP_BUILD_ID}
ENV _APP_BUILD_DATE=${_APP_BUILD_DATE}
ENV _APP_ENTRYPOINT=/opt/app/

### create application service account user.  Note: many light distro containers do not have 'useradd' in /sbin
RUN echo 'app-sa:x:1001:' >> /etc/group && \
  echo 'app-sa:x:1001:1001::/home/app-sa:/bin/bash' >> /etc/passwd && \
  mkdir -p /home/app-sa && \
  mkdir -p /opt/app/config && \
  chown -R app-sa: /home/app-sa && \
  chown -R app-sa: /opt/app

WORKDIR /opt/app
COPY --from=build-stage /build/bin/__MODULE_NAME__ .

ENTRYPOINT [ "/opt/app/__MODULE_NAME__" ]
